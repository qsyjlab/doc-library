import{_ as s,o as e,c as l,Q as a}from"./chunks/framework.ef2108e8.js";const u=JSON.parse('{"title":"@vitejs/plugin-legacy","description":"","frontmatter":{},"headers":[],"relativePath":"vite/plugin-legacy.md","filePath":"vite/plugin-legacy.md"}'),o={name:"vite/plugin-legacy.md"},n=a(`<h1 id="vitejs-plugin-legacy" tabindex="-1">@vitejs/plugin-legacy <a class="header-anchor" href="#vitejs-plugin-legacy" aria-label="Permalink to &quot;@vitejs/plugin-legacy&quot;">​</a></h1><p><a href="https://npmjs.com/package/@vitejs/plugin-legacy" target="_blank" rel="noreferrer"><img src="https://img.shields.io/npm/v/@vitejs/plugin-legacy.svg" alt="npm"></a></p><p>Vite默认的浏览器支持基线是原生ESM、原生ESM动态导入和i<wbr>mport.meta。这个插件为在生产环境中构建时不支持这些特性的旧浏览器提供支持。</p><p>默认情况下，这个插件将做以下:</p><ul><li><p>为最终bundle中的每个块生成相应的遗留块（legacy），使用@babel/preset-env转换并作为SystemJS模块发出(仍然支持代码分割!)</p></li><li></li><li><p>生成一个包含SystemJS运行时的polyfill块，以及由指定的浏览器目标和bundle中的实际使用情况决定的任何必要的polyfill块。</p></li><li><p>在生成的HTML中注入 <code>&lt;script nomodule&gt;</code> 标签，以有条件地加载polyfills和遗留包（legacy），仅在没有广泛可用的特性支持的浏览器中加载。</p></li><li><p>注入i<wbr>mport.meta.env.LEGACY env变量，该变量仅在遗留产品构建中为真，在所有其他情况下为假。</p></li></ul><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// vite.config.js</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> legacy </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@vitejs/plugin-legacy&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">legacy</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      targets: [</span><span style="color:#9ECBFF;">&#39;defaults&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;not IE 11&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">    }),</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// vite.config.js</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> legacy </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@vitejs/plugin-legacy&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  plugins: [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">legacy</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      targets: [</span><span style="color:#032F62;">&#39;defaults&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;not IE 11&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    }),</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>必须安装Terser，因为遗留插件使用Terser进行最小化。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-D</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">terser</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-D</span><span style="color:#24292E;"> </span><span style="color:#032F62;">terser</span></span></code></pre></div><blockquote><p>实测不安装似乎也没什么太大的问题</p></blockquote><h2 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;Options&quot;">​</a></h2><h3 id="targets" tabindex="-1"><code>targets</code> <a class="header-anchor" href="#targets" aria-label="Permalink to &quot;\`targets\`&quot;">​</a></h3><ul><li><p><strong>Type:</strong> <code>string | string[] | { [key: string]: string }</code></p></li><li><p><strong>Default:</strong> <a href="https://browsersl.ist/#q=last+2+versions+and+not+dead%2C+%3E+0.3%25%2C+Firefox+ESR" target="_blank" rel="noreferrer"><code>&#39;last 2 versions and not dead, &gt; 0.3%, Firefox ESR&#39;</code></a></p><p>如果显示声明, 它被传递给 <a href="https://babeljs.io/docs/en/babel-preset-env#targets" target="_blank" rel="noreferrer"><code>@babel/preset-env</code></a>.</p><p>这些查询条件也可以是 <a href="https://github.com/browserslist/browserslist" target="_blank" rel="noreferrer">兼容 Browserslist </a>。 更多详情请看<a href="https://github.com/browserslist/browserslist#best-practices" target="_blank" rel="noreferrer">Browserslist 最佳实践</a>。</p></li></ul><h3 id="polyfills" tabindex="-1"><code>polyfills</code> <a class="header-anchor" href="#polyfills" aria-label="Permalink to &quot;\`polyfills\`&quot;">​</a></h3><ul><li><p><strong>Type:</strong> <code>boolean | string[]</code></p></li><li><p><strong>Default:</strong> <code>true</code></p><p>默认情况下, 一个polyfills块是根据目标浏览器范围和最终包中的实际使用情况生成的。 (通过检测 <code>@babel/preset-env</code>&#39;s <code>useBuiltIns: &#39;usage&#39;</code>).</p><p>设置字符串列表来显示控制哪个 <code>polyfills</code> 被包含在其中。更多详情请看 <a href="#polyfill-specifiers">Polyfill Specifiers</a></p><p>设置为 <code>false</code> 避免生成 <code>polyfills</code> 和 处理他自己 （这将仍然会生成带有语法转换的 <code>legacy</code>）</p></li></ul><h3 id="additionallegacypolyfills" tabindex="-1"><code>additionalLegacyPolyfills</code> <a class="header-anchor" href="#additionallegacypolyfills" aria-label="Permalink to &quot;\`additionalLegacyPolyfills\`&quot;">​</a></h3><ul><li><p><strong>Type:</strong> <code>string[]</code></p><p>增加自定义导入这些 <code>legacy polyfills chunk</code>。由于基于使用的填充检测仅覆盖ES语言特性，因此可能需要使用此选项手动指定额外的DOM API填充。</p><p>Note: 如果 <code>modern</code> 和 <code>legacy</code> 都需要额外的 <code>polyfills</code> ，它们可以简单地导入到应用程序源代码中。</p></li></ul><h3 id="ignorebrowserslistconfig" tabindex="-1"><code>ignoreBrowserslistConfig</code> <a class="header-anchor" href="#ignorebrowserslistconfig" aria-label="Permalink to &quot;\`ignoreBrowserslistConfig\`&quot;">​</a></h3><ul><li><p><strong>Type:</strong> <code>boolean</code></p></li><li><p><strong>Default:</strong> <code>false</code></p><p><code>@babel/preset-env</code> 自动检测 <a href="https://github.com/browserslist/browserslist#browserslist-" target="_blank" rel="noreferrer"><code>browserslist</code> config sources （配置源）</a>:</p><ul><li><code>browserslist</code> field in <code>package.json</code></li><li><code>.browserslistrc</code> file in cwd.</li></ul><p>设置 <code>true</code> 忽略这些配置源。</p></li></ul><h3 id="modernpolyfills" tabindex="-1"><code>modernPolyfills</code> <a class="header-anchor" href="#modernpolyfills" aria-label="Permalink to &quot;\`modernPolyfills\`&quot;">​</a></h3><ul><li><p><strong>Type:</strong> <code>boolean | string[]</code></p></li><li><p><strong>Default:</strong> <code>false</code></p><p>默认为 <code>false</code>。启用这个选项对于 <code>modern</code> build 将生成一个单独的 <code>polyfills</code> chunk。(targeting <a href="#browsers-that-supports-esm-but-does-not-support-widely-available-features">browsers that support widely-available features</a>).</p><p>设置字符串列表来显式控制包含哪些 <code>polyfills</code>。更多详情请看 <a href="#polyfill-specifiers">Polyfill Specifiers</a></p><p>Note <strong>不推荐</strong> 设置为 <code>true</code> (使用自动检测) 。因为 <code>core-js@3</code> <code>polyfill</code> 代码侵入性非常强 ,由于它支持所有前言的特性。 甚至当 <code>target</code> 支持 <code>native esm</code> ，他依然注入 15kb 的 <code>polyfills</code></p><p>如果你不特别依赖前言的特性运行时，在现代构建中避免使用<code>polyfills</code> 是不难的。或者考虑使用按需服务 <a href="https://polyfill.io/v3/" target="_blank" rel="noreferrer">Polyfill.io</a> 基于实际浏览器的 <code>user-agents</code> 仅仅注入必要的 <code>polyfills</code>。（大多数现代浏览器是不需要任何的代码注入）</p></li></ul><h3 id="renderlegacychunks" tabindex="-1"><code>renderLegacyChunks</code> <a class="header-anchor" href="#renderlegacychunks" aria-label="Permalink to &quot;\`renderLegacyChunks\`&quot;">​</a></h3><ul><li><p><strong>Type:</strong> <code>boolean</code></p></li><li><p><strong>Default:</strong> <code>true</code></p><p>设置 <code>false</code> 禁用生成 <code>legacy chunks</code> . 这是有用的如果你使用 <code>modernPolyfills</code>, 本质上允许你使用这个插件注入 <code>polyfills</code> 到 现代构建中。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> legacy </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@vitejs/plugin-legacy&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">legacy</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      modernPolyfills: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">/* ... */</span></span>
<span class="line"><span style="color:#E1E4E8;">      ],</span></span>
<span class="line"><span style="color:#E1E4E8;">      renderLegacyChunks: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    }),</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> legacy </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@vitejs/plugin-legacy&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  plugins: [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">legacy</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      modernPolyfills: [</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">/* ... */</span></span>
<span class="line"><span style="color:#24292E;">      ],</span></span>
<span class="line"><span style="color:#24292E;">      renderLegacyChunks: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    }),</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></li></ul><h3 id="externalsystemjs" tabindex="-1"><code>externalSystemJS</code> <a class="header-anchor" href="#externalsystemjs" aria-label="Permalink to &quot;\`externalSystemJS\`&quot;">​</a></h3><ul><li><p><strong>Type:</strong> <code>boolean</code></p></li><li><p><strong>Default:</strong> <code>false</code></p><p>默认为 <code>false</code>. 启用这个选项将排除 <code>systemjs/dist/s.min.js</code> 从 <code>polyfills-legacy chunk</code></p><p>这允许你在外面自己引入。</p></li></ul><h3 id="rendermodernchunks" tabindex="-1"><code>renderModernChunks</code> <a class="header-anchor" href="#rendermodernchunks" aria-label="Permalink to &quot;\`renderModernChunks\`&quot;">​</a></h3><ul><li><p><strong>Type:</strong> <code>boolean</code></p></li><li><p><strong>Default:</strong> <code>true</code></p><p>设置为 <code>false</code> 仅输出 支持 <code>targets</code> 目标浏览器的 <code>legacy bundles</code>。</p></li></ul><h2 id="支持-esm-但不支持大部分可用的特性的浏览器" tabindex="-1">支持 <code>esm</code> 但不支持大部分可用的特性的浏览器 <a class="header-anchor" href="#支持-esm-但不支持大部分可用的特性的浏览器" aria-label="Permalink to &quot;支持 \`esm\` 但不支持大部分可用的特性的浏览器&quot;">​</a></h2><p>这个 <code>legacy</code> 插件提供一个在现代构建原生使用大部分特性的方法，同时退回到带有原生ESM但不支持这些功能的传统内置浏览器(例如legacy Edge)。该特性通过注入一个运行时检查，并在需要时用SystemJs运行时加载遗留包来工作。有以下缺点:</p><ul><li>现代构建产物 会被全部 esm 浏览器下载</li><li>现代构建产物 会抛出 <code>SyntaxError</code> 在没有特性支持的浏览器</li></ul><p>以下语法是被广泛使用的</p><ul><li>dynamic import</li><li><code>i<wbr>mport.meta</code></li><li>async generator</li></ul><h2 id="polyfill-说明符-polyfill-specifiers" tabindex="-1">Polyfill 说明符（Polyfill Specifiers） <a class="header-anchor" href="#polyfill-说明符-polyfill-specifiers" aria-label="Permalink to &quot;Polyfill 说明符（Polyfill Specifiers）&quot;">​</a></h2><p>Polyfill specifier strings for <code>polyfills</code> and <code>modernPolyfills</code> can be either of the following:</p><ul><li><p>Any <a href="https://unpkg.com/browse/core-js@latest/" target="_blank" rel="noreferrer"><code>core-js</code> 3 sub import paths</a> - e.g. <code>es/map</code> will import <code>core-js/es/map</code></p></li><li><p>Any <a href="https://unpkg.com/browse/core-js@latest/modules/" target="_blank" rel="noreferrer">individual <code>core-js</code> 3 modules</a> - e.g. <code>es.array.iterator</code> will import <code>core-js/modules/es.array.iterator.js</code></p></li></ul><p>polyfills和 的Polyfill 说明符字符串modernPolyfills可以是以下之一：</p><ul><li>任何 core-js3 个子导入路径- 例如es/map将导入core-js/es/map</li><li>任何单独的 core-js3 个模块- 例如es.array.iterator将导入core-js/modules/es.array.iterator.js</li></ul><p><strong>Example</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> legacy </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@vitejs/plugin-legacy&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">legacy</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      polyfills: [</span><span style="color:#9ECBFF;">&#39;es.promise.finally&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;es/map&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;es/set&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">      modernPolyfills: [</span><span style="color:#9ECBFF;">&#39;es.promise.finally&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">    }),</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> legacy </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@vitejs/plugin-legacy&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  plugins: [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">legacy</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      polyfills: [</span><span style="color:#032F62;">&#39;es.promise.finally&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;es/map&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;es/set&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">      modernPolyfills: [</span><span style="color:#032F62;">&#39;es.promise.finally&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    }),</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="内容安全政策-content-security-policy" tabindex="-1">内容安全政策 (Content Security Policy ) <a class="header-anchor" href="#内容安全政策-content-security-policy" aria-label="Permalink to &quot;内容安全政策 (Content Security Policy )&quot;">​</a></h2><p>The legacy plugin requires inline scripts for <a href="https://gist.github.com/samthor/64b114e4a4f539915a95b91ffd340acc" target="_blank" rel="noreferrer">Safari 10.1 <code>nomodule</code> fix</a>, SystemJS initialization, and dynamic import fallback. If you have a strict CSP policy requirement, you will need to <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/script-src#unsafe_inline_script" target="_blank" rel="noreferrer">add the corresponding hashes to your <code>script-src</code> list</a>:</p><p>旧版插件需要用于Safari 10.1nomodule修复、SystemJS 初始化和动态导入回退的内联脚本。如果您有严格的 CSP 策略要求，则需要将相应的哈希值添加到您的script-src列表中：</p><ul><li><code>sha256-MS6/3FCg4WjP9gwgaBGwLpRCY6fZBgwmhVCdrPrNf3E=</code></li><li><code>sha256-tQjf8gvb2ROOMapIxFvFAYBeUJ0v1HCbOcSmDNXGtDo=</code></li><li><code>sha256-4y/gEB2/KIwZFTfNqwXJq4olzvmQ0S214m9jwKgNXoc=</code></li><li><code>sha256-+5XkZFazzJo8n0iOP4ti/cLCMUudTf//Mzkb7xNPXIc=</code></li></ul><p>这些值（不带sha256-前缀）也可以通过以下方式检索</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { cspHashes } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@vitejs/plugin-legacy&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { cspHashes } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@vitejs/plugin-legacy&#39;</span></span></code></pre></div><p>当使用regenerator-runtimepolyfill时，它会尝试使用该globalThis对象来注册自己。如果globalThis不可用（它是相当新的并且没有得到广泛支持，包括 IE 11），它会尝试执行Function(...)违反 CSP 的动态调用。为了避免eval在没有动态的情况下globalThis考虑添加core-js/proposals/global-thistoadditionalLegacyPolyfills来定义它。</p><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to &quot;References&quot;">​</a></h2><ul><li><a href="https://cli.vuejs.org/guide/browser-compatibility.html#modern-mode" target="_blank" rel="noreferrer">Vue CLI modern mode</a></li><li><a href="https://philipwalton.com/articles/using-native-javascript-modules-in-production-today/" target="_blank" rel="noreferrer">Using Native JavaScript Modules in Production Today</a></li><li><a href="https://github.com/philipwalton/rollup-native-modules-boilerplate" target="_blank" rel="noreferrer">rollup-native-modules-boilerplate</a></li></ul>`,48),p=[n];function r(c,t,i,d,y,g){return e(),l("div",null,p)}const h=s(o,[["render",r]]);export{u as __pageData,h as default};
